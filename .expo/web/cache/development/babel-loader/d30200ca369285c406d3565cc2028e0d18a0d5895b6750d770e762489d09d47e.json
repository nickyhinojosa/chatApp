{"ast":null,"code":"import * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport dayjs from 'dayjs';\nimport Color from \"./Color\";\nimport { isSameDay } from \"./utils\";\nimport { DATE_FORMAT } from \"./Constant\";\nimport { useChatContext } from \"./GiftedChatContext\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: 5,\n    marginBottom: 10\n  },\n  text: {\n    backgroundColor: Color.backgroundTransparent,\n    color: Color.defaultColor,\n    fontSize: 12,\n    fontWeight: '600'\n  }\n});\nexport function Day(_ref) {\n  var _ref$dateFormat = _ref.dateFormat,\n    dateFormat = _ref$dateFormat === void 0 ? DATE_FORMAT : _ref$dateFormat,\n    currentMessage = _ref.currentMessage,\n    previousMessage = _ref.previousMessage,\n    containerStyle = _ref.containerStyle,\n    wrapperStyle = _ref.wrapperStyle,\n    textStyle = _ref.textStyle;\n  var _useChatContext = useChatContext(),\n    getLocale = _useChatContext.getLocale;\n  if (currentMessage == null || isSameDay(currentMessage, previousMessage)) return null;\n  return _jsx(View, {\n    style: [styles.container, containerStyle],\n    children: _jsx(View, {\n      style: wrapperStyle,\n      children: _jsx(Text, {\n        style: [styles.text, textStyle],\n        children: dayjs(currentMessage.createdAt).locale(getLocale()).format(dateFormat)\n      })\n    })\n  });\n}","map":{"version":3,"names":["React","StyleSheet","Text","View","dayjs","Color","isSameDay","DATE_FORMAT","useChatContext","jsx","_jsx","styles","create","container","alignItems","justifyContent","marginTop","marginBottom","text","backgroundColor","backgroundTransparent","color","defaultColor","fontSize","fontWeight","Day","_ref","_ref$dateFormat","dateFormat","currentMessage","previousMessage","containerStyle","wrapperStyle","textStyle","_useChatContext","getLocale","style","children","createdAt","locale","format"],"sources":["C:\\Users\\nicky\\Desktop\\Aplicaciones MÃ³viles I\\ChatApp\\node_modules\\react-native-gifted-chat\\src\\Day.tsx"],"sourcesContent":["import * as React from 'react'\nimport {\n  StyleSheet,\n  Text,\n  View,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  TextProps,\n} from 'react-native'\nimport dayjs from 'dayjs'\n\nimport Color from './Color'\nimport { isSameDay } from './utils'\nimport { DATE_FORMAT } from './Constant'\nimport { IMessage } from './Models'\n\nimport { useChatContext } from './GiftedChatContext'\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: 5,\n    marginBottom: 10,\n  },\n  text: {\n    backgroundColor: Color.backgroundTransparent,\n    color: Color.defaultColor,\n    fontSize: 12,\n    fontWeight: '600',\n  },\n})\n\nexport interface DayProps<TMessage extends IMessage = IMessage> {\n  currentMessage: TMessage\n  nextMessage?: TMessage\n  previousMessage?: TMessage\n  containerStyle?: StyleProp<ViewStyle>\n  wrapperStyle?: StyleProp<ViewStyle>\n  textStyle?: StyleProp<TextStyle>\n  textProps?: TextProps\n  dateFormat?: string\n  inverted?: boolean\n}\n\nexport function Day<TMessage extends IMessage = IMessage> ({\n  dateFormat = DATE_FORMAT,\n  currentMessage,\n  previousMessage,\n  containerStyle,\n  wrapperStyle,\n  textStyle,\n}: DayProps<TMessage>) {\n  const { getLocale } = useChatContext()\n\n  if (currentMessage == null || isSameDay(currentMessage, previousMessage))\n    return null\n\n  return (\n    <View style={[styles.container, containerStyle]}>\n      <View style={wrapperStyle}>\n        <Text style={[styles.text, textStyle]}>\n          {dayjs(currentMessage.createdAt)\n            .locale(getLocale())\n            .format(dateFormat)}\n        </Text>\n      </View>\n    </View>\n  )\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAU9B,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAOC,KAAK;AACZ,SAASC,SAAS;AAClB,SAASC,WAAW;AAGpB,SAASC,cAAc;AAA6B,SAAAC,GAAA,IAAAC,IAAA;AAEpD,IAAMC,MAAM,GAAGV,UAAU,CAACW,MAAM,CAAC;EAC/BC,SAAS,EAAE;IACTC,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE,QAAQ;IACxBC,SAAS,EAAE,CAAC;IACZC,YAAY,EAAE;GACf;EACDC,IAAI,EAAE;IACJC,eAAe,EAAEd,KAAK,CAACe,qBAAqB;IAC5CC,KAAK,EAAEhB,KAAK,CAACiB,YAAY;IACzBC,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE;;CAEf,CAAC;AAcF,OAAM,SAAUC,GAAGA,CAAAC,IAAA,EAOE;EAAA,IAAAC,eAAA,GAAAD,IAAA,CANnBE,UAAU;IAAVA,UAAU,GAAAD,eAAA,cAAGpB,WAAW,GAAAoB,eAAA;IACxBE,cAAc,GAAAH,IAAA,CAAdG,cAAc;IACdC,eAAe,GAAAJ,IAAA,CAAfI,eAAe;IACfC,cAAc,GAAAL,IAAA,CAAdK,cAAc;IACdC,YAAY,GAAAN,IAAA,CAAZM,YAAY;IACZC,SAAS,GAAAP,IAAA,CAATO,SAAS;EAET,IAAAC,eAAA,GAAsB1B,cAAc,EAAE;IAA9B2B,SAAS,GAAAD,eAAA,CAATC,SAAS;EAEjB,IAAIN,cAAc,IAAI,IAAI,IAAIvB,SAAS,CAACuB,cAAc,EAAEC,eAAe,CAAC,EACtE,OAAO,IAAI;EAEb,OACEpB,IAAA,CAACP,IAAI;IAACiC,KAAK,EAAE,CAACzB,MAAM,CAACE,SAAS,EAAEkB,cAAc,CAAE;IAAAM,QAAA,EAC9C3B,IAAA,CAACP,IAAI;MAACiC,KAAK,EAAEJ,YAAa;MAAAK,QAAA,EACxB3B,IAAA,CAACR,IAAI;QAACkC,KAAK,EAAE,CAACzB,MAAM,CAACO,IAAI,EAAEe,SAAS,CAAE;QAAAI,QAAA,EACnCjC,KAAK,CAACyB,cAAc,CAACS,SAAS,CAAC,CAC7BC,MAAM,CAACJ,SAAS,EAAE,CAAC,CACnBK,MAAM,CAACZ,UAAU;MAAC,CACjB;IACR,CAAM;EACR,CAAM,CAAC;AAEX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}